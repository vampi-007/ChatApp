{"ast":null,"code":"import $670gB$react, { useContext as $670gB$useContext, useState as $670gB$useState, useMemo as $670gB$useMemo, useLayoutEffect as $670gB$useLayoutEffect, useRef as $670gB$useRef } from \"react\";\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ // We must avoid a circular dependency with @react-aria/utils, and this useLayoutEffect is\n// guarded by a check that it only runs on the client side.\n// eslint-disable-next-line rulesdir/useLayoutEffectRule\n\n// Default context value to use in case there is no SSRProvider. This is fine for\n// client-only apps. In order to support multiple copies of React Aria potentially\n// being on the page at once, the prefix is set to a random number. SSRProvider\n// will reset this to zero for consistency between server and client, so in the\n// SSR case multiple copies of React Aria is not supported.\nconst $b5e257d569688ac6$var$defaultContext = {\n  prefix: String(Math.round(Math.random() * 10000000000)),\n  current: 0\n};\nconst $b5e257d569688ac6$var$SSRContext = /*#__PURE__*/(0, $670gB$react).createContext($b5e257d569688ac6$var$defaultContext);\nconst $b5e257d569688ac6$var$IsSSRContext = /*#__PURE__*/(0, $670gB$react).createContext(false);\n// This is only used in React < 18.\nfunction $b5e257d569688ac6$var$LegacySSRProvider(props) {\n  let cur = (0, $670gB$useContext)($b5e257d569688ac6$var$SSRContext);\n  let counter = $b5e257d569688ac6$var$useCounter(cur === $b5e257d569688ac6$var$defaultContext);\n  let [isSSR, setIsSSR] = (0, $670gB$useState)(true);\n  let value = (0, $670gB$useMemo)(() => ({\n    // If this is the first SSRProvider, start with an empty string prefix, otherwise\n    // append and increment the counter.\n    prefix: cur === $b5e257d569688ac6$var$defaultContext ? \"\" : `${cur.prefix}-${counter}`,\n    current: 0\n  }), [cur, counter]);\n  // If on the client, and the component was initially server rendered,\n  // then schedule a layout effect to update the component after hydration.\n  if (typeof document !== \"undefined\")\n    // This if statement technically breaks the rules of hooks, but is safe\n    // because the condition never changes after mounting.\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    (0, $670gB$useLayoutEffect)(() => {\n      setIsSSR(false);\n    }, []);\n  return /*#__PURE__*/(0, $670gB$react).createElement($b5e257d569688ac6$var$SSRContext.Provider, {\n    value: value\n  }, /*#__PURE__*/(0, $670gB$react).createElement($b5e257d569688ac6$var$IsSSRContext.Provider, {\n    value: isSSR\n  }, props.children));\n}\nlet $b5e257d569688ac6$var$warnedAboutSSRProvider = false;\nfunction $b5e257d569688ac6$export$9f8ac96af4b1b2ae(props) {\n  if (typeof (0, $670gB$react)[\"useId\"] === \"function\") {\n    if (process.env.NODE_ENV !== \"test\" && !$b5e257d569688ac6$var$warnedAboutSSRProvider) {\n      console.warn(\"In React 18, SSRProvider is not necessary and is a noop. You can remove it from your app.\");\n      $b5e257d569688ac6$var$warnedAboutSSRProvider = true;\n    }\n    return /*#__PURE__*/(0, $670gB$react).createElement((0, $670gB$react).Fragment, null, props.children);\n  }\n  return /*#__PURE__*/(0, $670gB$react).createElement($b5e257d569688ac6$var$LegacySSRProvider, props);\n}\nlet $b5e257d569688ac6$var$canUseDOM = Boolean(typeof window !== \"undefined\" && window.document && window.document.createElement);\nlet $b5e257d569688ac6$var$componentIds = new WeakMap();\nfunction $b5e257d569688ac6$var$useCounter(isDisabled = false) {\n  let ctx = (0, $670gB$useContext)($b5e257d569688ac6$var$SSRContext);\n  let ref = (0, $670gB$useRef)(null);\n  // eslint-disable-next-line rulesdir/pure-render\n  if (ref.current === null && !isDisabled) {\n    var _React___SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED_ReactCurrentOwner, _React___SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n    // In strict mode, React renders components twice, and the ref will be reset to null on the second render.\n    // This means our id counter will be incremented twice instead of once. This is a problem because on the\n    // server, components are only rendered once and so ids generated on the server won't match the client.\n    // In React 18, useId was introduced to solve this, but it is not available in older versions. So to solve this\n    // we need to use some React internals to access the underlying Fiber instance, which is stable between renders.\n    // This is exposed as ReactCurrentOwner in development, which is all we need since StrictMode only runs in development.\n    // To ensure that we only increment the global counter once, we store the starting id for this component in\n    // a weak map associated with the Fiber. On the second render, we reset the global counter to this value.\n    // Since React runs the second render immediately after the first, this is safe.\n    // @ts-ignore\n    let currentOwner = (_React___SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = (0, $670gB$react).__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED) === null || _React___SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED === void 0 ? void 0 : (_React___SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED_ReactCurrentOwner = _React___SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner) === null || _React___SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED_ReactCurrentOwner === void 0 ? void 0 : _React___SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED_ReactCurrentOwner.current;\n    if (currentOwner) {\n      let prevComponentValue = $b5e257d569688ac6$var$componentIds.get(currentOwner);\n      if (prevComponentValue == null)\n        // On the first render, and first call to useId, store the id and state in our weak map.\n        $b5e257d569688ac6$var$componentIds.set(currentOwner, {\n          id: ctx.current,\n          state: currentOwner.memoizedState\n        });else if (currentOwner.memoizedState !== prevComponentValue.state) {\n        // On the second render, the memoizedState gets reset by React.\n        // Reset the counter, and remove from the weak map so we don't\n        // do this for subsequent useId calls.\n        ctx.current = prevComponentValue.id;\n        $b5e257d569688ac6$var$componentIds.delete(currentOwner);\n      }\n    }\n    // eslint-disable-next-line rulesdir/pure-render\n    ref.current = ++ctx.current;\n  }\n  // eslint-disable-next-line rulesdir/pure-render\n  return ref.current;\n}\nfunction $b5e257d569688ac6$var$useLegacySSRSafeId(defaultId) {\n  let ctx = (0, $670gB$useContext)($b5e257d569688ac6$var$SSRContext);\n  // If we are rendering in a non-DOM environment, and there's no SSRProvider,\n  // provide a warning to hint to the developer to add one.\n  if (ctx === $b5e257d569688ac6$var$defaultContext && !$b5e257d569688ac6$var$canUseDOM) console.warn(\"When server rendering, you must wrap your application in an <SSRProvider> to ensure consistent ids are generated between the client and server.\");\n  let counter = $b5e257d569688ac6$var$useCounter(!!defaultId);\n  let prefix = ctx === $b5e257d569688ac6$var$defaultContext && process.env.NODE_ENV === \"test\" ? \"react-aria\" : `react-aria${ctx.prefix}`;\n  return defaultId || `${prefix}-${counter}`;\n}\nfunction $b5e257d569688ac6$var$useModernSSRSafeId(defaultId) {\n  // @ts-ignore\n  let id = (0, $670gB$react).useId();\n  let [didSSR] = (0, $670gB$useState)($b5e257d569688ac6$export$535bd6ca7f90a273());\n  let prefix = didSSR || process.env.NODE_ENV === \"test\" ? \"react-aria\" : `react-aria${$b5e257d569688ac6$var$defaultContext.prefix}`;\n  return defaultId || `${prefix}-${id}`;\n}\nconst $b5e257d569688ac6$export$619500959fc48b26 = typeof (0, $670gB$react)[\"useId\"] === \"function\" ? $b5e257d569688ac6$var$useModernSSRSafeId : $b5e257d569688ac6$var$useLegacySSRSafeId;\nfunction $b5e257d569688ac6$var$getSnapshot() {\n  return false;\n}\nfunction $b5e257d569688ac6$var$getServerSnapshot() {\n  return true;\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nfunction $b5e257d569688ac6$var$subscribe(onStoreChange) {\n  // noop\n  return () => {};\n}\nfunction $b5e257d569688ac6$export$535bd6ca7f90a273() {\n  // In React 18, we can use useSyncExternalStore to detect if we're server rendering or hydrating.\n  if (typeof (0, $670gB$react)[\"useSyncExternalStore\"] === \"function\") return (0, $670gB$react)[\"useSyncExternalStore\"]($b5e257d569688ac6$var$subscribe, $b5e257d569688ac6$var$getSnapshot, $b5e257d569688ac6$var$getServerSnapshot);\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  return (0, $670gB$useContext)($b5e257d569688ac6$var$IsSSRContext);\n}\nexport { $b5e257d569688ac6$export$9f8ac96af4b1b2ae as SSRProvider, $b5e257d569688ac6$export$535bd6ca7f90a273 as useIsSSR, $b5e257d569688ac6$export$619500959fc48b26 as useSSRSafeId };","map":{"version":3,"names":["$670gB$react","useContext","$670gB$useContext","useState","$670gB$useState","useMemo","$670gB$useMemo","useLayoutEffect","$670gB$useLayoutEffect","useRef","$670gB$useRef","$b5e257d569688ac6$var$defaultContext","prefix","String","Math","round","random","current","$b5e257d569688ac6$var$SSRContext","createContext","$b5e257d569688ac6$var$IsSSRContext","$b5e257d569688ac6$var$LegacySSRProvider","props","cur","counter","$b5e257d569688ac6$var$useCounter","isSSR","setIsSSR","value","document","createElement","Provider","children","$b5e257d569688ac6$var$warnedAboutSSRProvider","$b5e257d569688ac6$export$9f8ac96af4b1b2ae","process","env","NODE_ENV","console","warn","Fragment","$b5e257d569688ac6$var$canUseDOM","Boolean","window","$b5e257d569688ac6$var$componentIds","WeakMap","isDisabled","ctx","ref","_React___SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED_ReactCurrentOwner","_React___SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED","currentOwner","__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED","ReactCurrentOwner","prevComponentValue","get","set","id","state","memoizedState","delete","$b5e257d569688ac6$var$useLegacySSRSafeId","defaultId","$b5e257d569688ac6$var$useModernSSRSafeId","useId","didSSR","$b5e257d569688ac6$export$535bd6ca7f90a273","$b5e257d569688ac6$export$619500959fc48b26","$b5e257d569688ac6$var$getSnapshot","$b5e257d569688ac6$var$getServerSnapshot","$b5e257d569688ac6$var$subscribe","onStoreChange","SSRProvider","useIsSSR","useSSRSafeId"],"sources":["/Users/applepc/Desktop/Abdulrehman/React Programming/FullStack/ChatApp/ChatApp.Client/node_modules/@react-aria/ssr/dist/SSRProvider.mjs"],"sourcesContent":["import $670gB$react, {useContext as $670gB$useContext, useState as $670gB$useState, useMemo as $670gB$useMemo, useLayoutEffect as $670gB$useLayoutEffect, useRef as $670gB$useRef} from \"react\";\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ // We must avoid a circular dependency with @react-aria/utils, and this useLayoutEffect is\n// guarded by a check that it only runs on the client side.\n// eslint-disable-next-line rulesdir/useLayoutEffectRule\n\n// Default context value to use in case there is no SSRProvider. This is fine for\n// client-only apps. In order to support multiple copies of React Aria potentially\n// being on the page at once, the prefix is set to a random number. SSRProvider\n// will reset this to zero for consistency between server and client, so in the\n// SSR case multiple copies of React Aria is not supported.\nconst $b5e257d569688ac6$var$defaultContext = {\n    prefix: String(Math.round(Math.random() * 10000000000)),\n    current: 0\n};\nconst $b5e257d569688ac6$var$SSRContext = /*#__PURE__*/ (0, $670gB$react).createContext($b5e257d569688ac6$var$defaultContext);\nconst $b5e257d569688ac6$var$IsSSRContext = /*#__PURE__*/ (0, $670gB$react).createContext(false);\n// This is only used in React < 18.\nfunction $b5e257d569688ac6$var$LegacySSRProvider(props) {\n    let cur = (0, $670gB$useContext)($b5e257d569688ac6$var$SSRContext);\n    let counter = $b5e257d569688ac6$var$useCounter(cur === $b5e257d569688ac6$var$defaultContext);\n    let [isSSR, setIsSSR] = (0, $670gB$useState)(true);\n    let value = (0, $670gB$useMemo)(()=>({\n            // If this is the first SSRProvider, start with an empty string prefix, otherwise\n            // append and increment the counter.\n            prefix: cur === $b5e257d569688ac6$var$defaultContext ? \"\" : `${cur.prefix}-${counter}`,\n            current: 0\n        }), [\n        cur,\n        counter\n    ]);\n    // If on the client, and the component was initially server rendered,\n    // then schedule a layout effect to update the component after hydration.\n    if (typeof document !== \"undefined\") // This if statement technically breaks the rules of hooks, but is safe\n    // because the condition never changes after mounting.\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    (0, $670gB$useLayoutEffect)(()=>{\n        setIsSSR(false);\n    }, []);\n    return /*#__PURE__*/ (0, $670gB$react).createElement($b5e257d569688ac6$var$SSRContext.Provider, {\n        value: value\n    }, /*#__PURE__*/ (0, $670gB$react).createElement($b5e257d569688ac6$var$IsSSRContext.Provider, {\n        value: isSSR\n    }, props.children));\n}\nlet $b5e257d569688ac6$var$warnedAboutSSRProvider = false;\nfunction $b5e257d569688ac6$export$9f8ac96af4b1b2ae(props) {\n    if (typeof (0, $670gB$react)[\"useId\"] === \"function\") {\n        if (process.env.NODE_ENV !== \"test\" && !$b5e257d569688ac6$var$warnedAboutSSRProvider) {\n            console.warn(\"In React 18, SSRProvider is not necessary and is a noop. You can remove it from your app.\");\n            $b5e257d569688ac6$var$warnedAboutSSRProvider = true;\n        }\n        return /*#__PURE__*/ (0, $670gB$react).createElement((0, $670gB$react).Fragment, null, props.children);\n    }\n    return /*#__PURE__*/ (0, $670gB$react).createElement($b5e257d569688ac6$var$LegacySSRProvider, props);\n}\nlet $b5e257d569688ac6$var$canUseDOM = Boolean(typeof window !== \"undefined\" && window.document && window.document.createElement);\nlet $b5e257d569688ac6$var$componentIds = new WeakMap();\nfunction $b5e257d569688ac6$var$useCounter(isDisabled = false) {\n    let ctx = (0, $670gB$useContext)($b5e257d569688ac6$var$SSRContext);\n    let ref = (0, $670gB$useRef)(null);\n    // eslint-disable-next-line rulesdir/pure-render\n    if (ref.current === null && !isDisabled) {\n        var _React___SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED_ReactCurrentOwner, _React___SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n        // In strict mode, React renders components twice, and the ref will be reset to null on the second render.\n        // This means our id counter will be incremented twice instead of once. This is a problem because on the\n        // server, components are only rendered once and so ids generated on the server won't match the client.\n        // In React 18, useId was introduced to solve this, but it is not available in older versions. So to solve this\n        // we need to use some React internals to access the underlying Fiber instance, which is stable between renders.\n        // This is exposed as ReactCurrentOwner in development, which is all we need since StrictMode only runs in development.\n        // To ensure that we only increment the global counter once, we store the starting id for this component in\n        // a weak map associated with the Fiber. On the second render, we reset the global counter to this value.\n        // Since React runs the second render immediately after the first, this is safe.\n        // @ts-ignore\n        let currentOwner = (_React___SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = (0, $670gB$react).__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED) === null || _React___SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED === void 0 ? void 0 : (_React___SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED_ReactCurrentOwner = _React___SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner) === null || _React___SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED_ReactCurrentOwner === void 0 ? void 0 : _React___SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED_ReactCurrentOwner.current;\n        if (currentOwner) {\n            let prevComponentValue = $b5e257d569688ac6$var$componentIds.get(currentOwner);\n            if (prevComponentValue == null) // On the first render, and first call to useId, store the id and state in our weak map.\n            $b5e257d569688ac6$var$componentIds.set(currentOwner, {\n                id: ctx.current,\n                state: currentOwner.memoizedState\n            });\n            else if (currentOwner.memoizedState !== prevComponentValue.state) {\n                // On the second render, the memoizedState gets reset by React.\n                // Reset the counter, and remove from the weak map so we don't\n                // do this for subsequent useId calls.\n                ctx.current = prevComponentValue.id;\n                $b5e257d569688ac6$var$componentIds.delete(currentOwner);\n            }\n        }\n        // eslint-disable-next-line rulesdir/pure-render\n        ref.current = ++ctx.current;\n    }\n    // eslint-disable-next-line rulesdir/pure-render\n    return ref.current;\n}\nfunction $b5e257d569688ac6$var$useLegacySSRSafeId(defaultId) {\n    let ctx = (0, $670gB$useContext)($b5e257d569688ac6$var$SSRContext);\n    // If we are rendering in a non-DOM environment, and there's no SSRProvider,\n    // provide a warning to hint to the developer to add one.\n    if (ctx === $b5e257d569688ac6$var$defaultContext && !$b5e257d569688ac6$var$canUseDOM) console.warn(\"When server rendering, you must wrap your application in an <SSRProvider> to ensure consistent ids are generated between the client and server.\");\n    let counter = $b5e257d569688ac6$var$useCounter(!!defaultId);\n    let prefix = ctx === $b5e257d569688ac6$var$defaultContext && process.env.NODE_ENV === \"test\" ? \"react-aria\" : `react-aria${ctx.prefix}`;\n    return defaultId || `${prefix}-${counter}`;\n}\nfunction $b5e257d569688ac6$var$useModernSSRSafeId(defaultId) {\n    // @ts-ignore\n    let id = (0, $670gB$react).useId();\n    let [didSSR] = (0, $670gB$useState)($b5e257d569688ac6$export$535bd6ca7f90a273());\n    let prefix = didSSR || process.env.NODE_ENV === \"test\" ? \"react-aria\" : `react-aria${$b5e257d569688ac6$var$defaultContext.prefix}`;\n    return defaultId || `${prefix}-${id}`;\n}\nconst $b5e257d569688ac6$export$619500959fc48b26 = typeof (0, $670gB$react)[\"useId\"] === \"function\" ? $b5e257d569688ac6$var$useModernSSRSafeId : $b5e257d569688ac6$var$useLegacySSRSafeId;\nfunction $b5e257d569688ac6$var$getSnapshot() {\n    return false;\n}\nfunction $b5e257d569688ac6$var$getServerSnapshot() {\n    return true;\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nfunction $b5e257d569688ac6$var$subscribe(onStoreChange) {\n    // noop\n    return ()=>{};\n}\nfunction $b5e257d569688ac6$export$535bd6ca7f90a273() {\n    // In React 18, we can use useSyncExternalStore to detect if we're server rendering or hydrating.\n    if (typeof (0, $670gB$react)[\"useSyncExternalStore\"] === \"function\") return (0, $670gB$react)[\"useSyncExternalStore\"]($b5e257d569688ac6$var$subscribe, $b5e257d569688ac6$var$getSnapshot, $b5e257d569688ac6$var$getServerSnapshot);\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    return (0, $670gB$useContext)($b5e257d569688ac6$var$IsSSRContext);\n}\n\n\nexport {$b5e257d569688ac6$export$9f8ac96af4b1b2ae as SSRProvider, $b5e257d569688ac6$export$535bd6ca7f90a273 as useIsSSR, $b5e257d569688ac6$export$619500959fc48b26 as useSSRSafeId};\n//# sourceMappingURL=SSRProvider.mjs.map\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}